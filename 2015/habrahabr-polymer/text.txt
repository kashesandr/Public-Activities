Вебкомпоненты -> Polymer 1.0 -> Пример

# Введение

## Кто я
Я - Александр Кашеверов, веб-разработчик, работаю в компании DataArt с 2011 года.

## О чём статья
Статья про веб-комоненты и Polymer с примером в конце.

## Вступление
Технологии для веба были придуманы и внедрены исходя из лучшего решения на тот момент. А развитие веб технологий подталкиваются потребностями, поэтому мы эмпирическим путём дошли до того, до чего дошли :)
Бизнес требует создания крупных программных продуктов для Веба с широкой функциональностью, красотой, высокой производительностью. И бизнес готов вкладывать в это деньги. Но реализация порой упирается в сложность и специфичность Веба. Упростить разработку крупных продуктов можно, если внедрить компонентный подход, где возможна изоляция и повторное использование. Для больших команд это важно - чтобы разработка была максимально независима от других разработчиков. Мы в контексте веба, поэтому CSS не должен пересекаться, области видимости JS не должны пересекаться. HTML - хорошо бы убрать излишие элементы, упираться в ограничения и иметь возможность создавать свои теги, к тому же теги должны быть совместими со стилями и JS.

# Web Components

Веб медленно, но верно, движется к компонентизации, это естесственный процесс. Всё сложное - можно упростить, если разбить на более простые части. Фреймворки в той или иной степени внедряюи компонентизацию. Angular, к примеру, даёт возможность создавать директивы с изолированной логикой и их достаточно просто переиспользовать, и даже css можно вроде как "инкапсулировать" (https://github.com/Yappli/angular-css-injector). Последнее время начали набирать популярность веб компоненты. Это реализация идеи компонентизации на уровне браузера.
Веб компоненты начали свою историю в 2012 году. Если коротко, то состоят и 4 основных частей:
- Custom Elements (создание своих html элементов, дополнение существующих)
- Shadow DOM (инкапсуляция логики и стилей)
- Templates (всё понятно)
- HTML imports (вместо отдельного подключения разных типов файлов [css, js, ..] - можно подключать готовый компонент html, который сам изолированно все подтягивает в документ)
Соединяя это всё вместе получаются изолированные независимые пеереиспользуемые части.
Простейший пример веб-компонента - <select>.
?описать подробнее
?тут пример
Наверняка, многие подключали в проект Bootstrap - для этого нужно отдельно прописать подгрузку стилей и скриптов. С компонентами это можно сделать проще: [code]<link rel="import" href="bootstrap.html"></link>[/code]
И наконец-то можно будет подключать google analytics без лишнего кода, например так: [code]<google-analytics domain="example.com" code="UA-XXXXX-Y"></google-analytics>[/code]
Да, за капотом будет еще код, но для конечного использования будет всё проще.
Web components - это не фреймворк. Это набор востребованных технологий реализованных в браузере.

## web components - поддержка браузерами
На данный момент 3 из 4 технологий находятся в стадии "Working Draft" на W3C.
И, конечно, технологии не поддерживаются всеми браузерами.
Текущее состояние дел: http://caniuse.com/#search=components, http://jonrimmer.github.io/are-we-componentized-yet/
Так как веб компоненты в перспективе имеют высоую ценность для разработчиков, но еще не поддерживаются всеми браузерами, то создаются способы, чтобы технология-таки работала везде. Так родился проект https://github.com/webcomponents/webcomponentsjs#browser-support. Используя его, поддержка бреузерами уже получше

## web components - полезные ссылки
Что почитать еще:
https://learn.javascript.ru/webcomponentsъ
?еще ссылок

# Polymer

Тем временем Google решил всё упрощать и развивать. Судя по истории коммитов на github, работа началась осенью 2012 года. Они взяли веб компоненты, полифилы и создали еще одну надстройку над всем этим.

## Polymer - коротко что это
Полимер из себя представляет те же вебкомпоненты в основе (shadow dom, custom elements, html imports, templates), полифилы для поддержки неподдерживающих браузеров, все обернуто в целостную более удобную экосистему. А на основе этого Google создал набор примеров переиспользуемых компонентов. Разбили их на части:
 - Iron elements (основные строительные блоки)
 - Paper elements (готовые переиспользуемые элементы на основе iron-elements и material design)
 - Google web components (коллекция веб компонентов, использующих различные API Google. Например: google-maps,google-youtube)
 - Gold elements (элементы специфичные для интернет-коммерции, например input-element для валидации кредитной карты)
 - Neon elements (элементы для создания анимаций)
 - Platinum elements (элементы помогабщие создать из веб-страницы настоящее веб приложение, например push-нотификации, использование offline версии, bluetooth)
 - Molecules (элементы-обёртки других библиотек/приложений, для более простого использования)
На конференции Google IO 2015 в мае 2015 анонсировали версию 1.0.
Докладчики часто повторяли фразу "there is an element for that" - это как слоган. ???
Философия в том что всё - это элементы. Даже ajax запрос.
?пример запроса
Polymer - это не фреймворк. Это обёртка и сахар. Я бы сравнил его с библиотекой jQuery. Но jQuery создана для работы с DOM, а Polymer для работы с web components.

## Polymer - тестируемость
Да, он тестируемый и для этого создана отдельная утилита https://github.com/Polymer/web-component-tester

## Polymer - примеры работ
http://todomvc.com/examples/polymer/index.html
Anonymous chat http://pubnub.github.io/paper-chat/ + src
home assistant https://home-assistant.io/demo/ + src

## Polymer - альтернативы
http://bosonic.github.io/
http://x-tags.org/

## Polymer - производительность
Polymer.js performance on mobile platforms can often be somewhere between frustrating and problematic.

## Polymer - vulcanize
HTML imports feature -> into a single file

## Polymer - поддержка браузерами
У меня так и не получилось запустить на старом андроид-телефоне

## Polymer - почитать
https://www.youtube.com/watch?v=fD2As5RmM8Q

# Пример

# Выводы

# Если есть ошибки - пишите личным сообщением. Спасибо!

# от себя
сначала была идея, потом решил что хочу полимер, но мотиватором стало выступление на летней практике, я пообещал, что выступлю
при изучении новой технологии мне проще не пользоваться boilerplate, а сначала узнать азы

http://www.pubnub.com/blog/creating-a-polymer-chat-app-with-material-design/

chip-in.me github.com/kashesandr/CIC

Пример без Polymer
<template id="template">
  <style>input { color: orange; }</style>
  <input type="text">
</template>
<script>
var proto = Object.create(HTMLElement.prototype, {
  createdCallback: {
    value: function() {
      var t = document.querySelector('#template');
      this.createShadowRoot().appendChild(t.content.cloneNode(true));
    }
  }
});
var MyInput = document.register('my-input', {prototype: proto});
</script>

Пример с Polymer
<polymer-element name="my-input" constructor="MyInput" noscript>
  <!-- Note: Polymer creates Shadow DOM from the first <template>. -->
  <template>
    <style>input { color: orange; }</style>
    <input type="text">
  </template>
</polymer-element>

<my-input></my-input>
// var myInput = document.createElement('my-input');
// var myInput = new MyInput();