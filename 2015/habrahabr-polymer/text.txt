Вебкомпоненты -> Polymer 1.0 -> Пример

# Введение

## Кто я
Я - Александр Кашеверов, веб-разработчик, работаю в компании DataArt с 2011 года.

## О чём статья
Статья про веб-комоненты и Polymer с примером в конце.

## Вступление
Веб постоянно развивается. Технологии для веба были придуманы и внедрены исходя из потребностей, актуальных на момент создания. 10 лет назад невозможно было сделать то, что мы реализуем сейчас.
Бизнес требует создания крупных программных веб-продуктов с широкой функциональностью, красотой, высокой производительностью. И бизнес готов вкладывать в это деньги. Но реализация порой упирается в сложность и специфичность Веба. Сложный продукт вообще лучше сложным не делать, а разбить на более простые и изолированные части и вложиться в структуру приложения. Такой компонентный подход позволяет вести разработку отдельных частей продукта независимо от других частей, а так же позволяет повторно использовать уже готовые. Для больших продуктов и, соответственно, команд это важно. Разработка одних компонентов должна быть максимально независима от разработки других компонентов. Для нас в контексте веба при подобном подходе необходимо чтобы:
 1. CSS не пересекался,
 2. Области видимости JS не пересекались.
 3. HTML не имел излиших бессмысленных элементов в DOM-дереве и был хорошо читаемым. Так же желательно не упираться в ограничения и иметь возможность создавать свои теги, к тому же теги должны быть совместими со стилями и JS.

# Web Components

Веб медленно, но верно, движется к компонентизации - это естесственный процесс. Всё сложное можно упростить, разбив на более простые части. Фреймворки в той или иной степени внедряют компонентизацию. Angular, к примеру, даёт возможность создавать директивы с изолированной логикой и их достаточно просто переиспользовать. Даже CSS можно псевдоинкапсулировать (https://github.com/Yappli/angular-css-injector). Последнее время набирают популярность веб компоненты. Это реализация идеи компонентизации на уровне браузера.
Веб компоненты начали свою историю в 2012 году. Кратко рассмотрим что это. Они состоят и 4 основных частей:
- Custom Elements (создание своих html элементов, дополнение существующих)
- Shadow DOM (инкапсуляция логики и стилей)
- Templates (создание шаблнов)
- HTML imports (вместо отдельного подключения разных типов файлов [css, js, ..] - можно подключать HTML компонент, который сам все подтягивает в документ)
Соединяя эти 4 технологии вместе получаются автономные пеереиспользуемые блоки - веб компоненты.
На самом деле, некое подобие вебкомпонент уже были созданы давно. Простейший пример - элемент <select>. Для него есть отдельный тег. Кликая на элемент появляется выпадающий список и его логика скрыта от нас. В этом и есть суть вебкомпонентов - мы создаем простые и понятные элементы со скрытой логикой, стилями, которые независимы от внешнего окружения.
?тут пример как выглядят вебкомпоненты в бою
<template id="template">
  <style>input { color: orange; }</style>
  <input type="text">
</template>
<script>
var proto = Object.create(HTMLElement.prototype, {
  createdCallback: {
    value: function() {
      var t = document.querySelector('#template');
      this.createShadowRoot().appendChild(t.content.cloneNode(true));
    }
  }
});
var MyInput = document.register('my-input', {prototype: proto});
</script>

Наверняка, многие подключали в проект Bootstrap - для этого нужно отдельно прописать подгрузку стилей и скриптов. С компонентами это можно сделать проще: [code]<link rel="import" href="bootstrap.html"></link>[/code]
И наконец-то можно будет подключать google analytics без лишнего кода, например так: [code]<google-analytics domain="example.com" code="UA-XXXXX-Y"></google-analytics>[/code]
Web components - это не фреймворк. Это набор технологий, реализованных на уровне браузера.

## web components - поддержка браузерами и полифилы
На данный момент 3 из 4 технологий находятся в стадии "Working Draft" на W3C.
И, конечно, технологии не поддерживаются всеми браузерами.
Текущее состояние дел: http://caniuse.com/#search=components, http://jonrimmer.github.io/are-we-componentized-yet/
Так как веб компоненты в перспективе имеют высоую ценность для разработчиков, но еще не поддерживаются всеми браузерами, то создаются способы, чтобы технология-таки работала везде. Так родился проект https://github.com/webcomponents/webcomponentsjs#browser-support. Используя его, поддержка бреузерами уже получше.

## web components - полезные ссылки
https://learn.javascript.ru/webcomponents
?еще ссылок

# Polymer

Тем временем Google всё упрощает и развивает. Судя по истории коммитов на github, работа началась осенью 2012 года. Они взяли веб компоненты, полифилы и создали еще одну надстройку над всем этим.
Цель Polymer (со слов product manager'а) - упростить создание качественных веб-приложений.

## Polymer - коротко что это
Полимер из себя представляет те же вебкомпоненты в основе (shadow dom, custom elements, html imports, templates), полифилы для поддержки неподдерживающих браузеров, так же всё это обёрнуто в целостную более удобную экосистему с добавлением сахара. А на основе этого Google создал набор примеров переиспользуемых компонентов. Разбили их на логические части:
 - Iron elements - Основные строительные блоки
 - Paper elements - Готовые переиспользуемые элементы на основе iron-elements и material design
 - Google web components - Коллекция веб компонентов, использующих различные API Google. Например: maps, youtube, drive
 - Gold elements - Элементы, специфичные для интернет-коммерции. Например, input-element с валидациией кредитной карты
 - Neon elements - Элементы для создания анимаций
 - Platinum elements - Элементы, помогающие создать из веб-страницы настоящее веб приложение, например push-нотификации, использование offline версии, bluetooth
 - Molecules - Элементы-обёртки других библиотек/приложений, для более простого использования
Как Вы могли заметить, постоянно фигурирует слово "элемент". Это не спроста - гугл считает, что для всего есть элементы. "there is an element for that" - звучит как слоган в докладах Google IO 2015. Да, даже для ajax запроса есть элемент. Выглядит он вот так:
? пример аякс запроса
Получается, что при создании приложения мы сталкиваемся постоянно с примерно одинаковыми задачами и Гугл предоставляет набор готовых строительных блоков для этого. С какой проблемой бы вы не столкнулись - для её решения есть элемент. "there is an element for that".
elements.polymer.com - каталог готовых компонент.
На этой же конференции Google в мае 2015 анонсировал версию продукта 1.0. Была проделана большая работа.
? какая конкретно
Polymer - это не фреймворк. Это обёртка и сахар. Я бы сравнил его с библиотекой jQuery. Но jQuery создана для работы с DOM, а Polymer для работы с web components.

## Polymer - тестируемость
Да, он тестируемый и для этого создана отдельная утилита https://github.com/Polymer/web-component-tester
? какие-то подробности

## Polymer - примеры работ
https://translate.google.com/
https://play.google.com/music/listen#/sulp
http://todomvc.com/examples/polymer/index.html
https://santatracker.google.com/
Anonymous chat http://pubnub.github.io/paper-chat/
home assistant https://home-assistant.io/demo/

## Polymer - поддержка браузерами
У меня так и не получилось запустить на старом андроид-телефоне
? подробности

## Polymer - производительность
Polymer.js performance on mobile platforms can often be somewhere between frustrating and problematic.

## Polymer - vulcanize
HTML imports позволяет быстро и удобно подключить документ в другой документ, но в этом удобстве скрывается и проблема производительности - для полной подгрузки документ создаются множество хттп-запросов. Ведь HTML imports может быть вложенным. Решение есть - соединиить все подключаемые файлы в один. Для этого есть утилита vulcanize.

## Polymer - starter kit
???

## Polymer - альтернативы
Есть альтернативы:
http://bosonic.github.io/
http://x-tags.org/

## Polymer - почитать
https://www.youtube.com/watch?v=fD2As5RmM8Q

# Пример
Когда я услышал про Полимер и захотел его немного изучить, то не хотелось быть теоретиком. Возникла мысль написать небольшое приложение, до которого никак не доходили руки.
Идея приложения проста: когда группа людей делают совместную покупку (будь то подарок на день рождения или выход в лес на шашлык) то, часто возникает проблема - все путаются в расчётах долгов. Писать на том, что уже изучены было скучно. Решил попробовать Полимер.
Исходный код здесь: github.com/kashesandr/CIC
Рабочий сайт здесь: chip-in.me

Личные впечатления от библиотеки:
- это ещё одна немного другая логика, к ней (как и всегда) нужно привыкнуть
- приложение достаточно логично и просто разбивается на кастомные вебкомпоненты, которые строятся из компонентов Полимера
- не сразу понятно как работает вёрстка
- не сразу понятно как работает ту-вей байндинг для массивов, надо документацию внимательне читать, там всё есть

# Выводы
? выводы

# Если есть ошибки - пишите личным сообщением. Спасибо!

# от себя
сначала была идея, потом решил что хочу полимер, но мотиватором стало выступление на летней практике, я пообещал, что выступлю
при изучении новой технологии мне проще не пользоваться boilerplate, а сначала узнать азы

http://www.pubnub.com/blog/creating-a-polymer-chat-app-with-material-design/


Пример с Polymer
<polymer-element name="my-input" constructor="MyInput" noscript>
  <!-- Note: Polymer creates Shadow DOM from the first <template>. -->
  <template>
    <style>input { color: orange; }</style>
    <input type="text">
  </template>
</polymer-element>

<my-input></my-input>
// var myInput = document.createElement('my-input');
// var myInput = new MyInput();